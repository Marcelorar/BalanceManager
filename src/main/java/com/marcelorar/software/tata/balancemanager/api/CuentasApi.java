/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.marcelorar.software.tata.balancemanager.api;

import com.marcelorar.software.tata.balancemanager.model.Account;
import com.marcelorar.software.tata.balancemanager.model.AccountPOST;
import com.marcelorar.software.tata.balancemanager.model.AccountPUT;
import com.marcelorar.software.tata.balancemanager.model.GetAllAccounts200ResponseInner;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-06-28T02:33:41.156016200-05:00[America/Guayaquil]", comments = "Generator version: 7.6.0")
@Validated
@Tag(name = "Account", description = "Operations related to a Client Account.")
public interface CuentasApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /cuentas : Create an Account.
     * Create an Account.
     *
     * @param accountPOST Account information. (optional)
     * @return successful operation (status code 201)
     */
    @Operation(
        operationId = "createAccount",
        summary = "Create an Account.",
        description = "Create an Account.",
        tags = { "Account" },
        responses = {
            @ApiResponse(responseCode = "201", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Account.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/cuentas",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Account> createAccount(
        @Parameter(name = "AccountPOST", description = "Account information.") @Valid @RequestBody(required = false) AccountPOST accountPOST
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"number\" : \"200012\", \"clientId\" : 2, \"isEnabled\" : true, \"type\" : \"SAVINGS\", \"availableBalance\" : \"100.23\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /cuentas/{number} : Delete an Account
     * Delete an existent Account.
     *
     * @param number Account number. (required)
     * @return Account successfully eliminated (status code 200)
     *         or Client not found (status code 404)
     */
    @Operation(
        operationId = "deleteAccount",
        summary = "Delete an Account",
        description = "Delete an existent Account.",
        tags = { "Account" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Account successfully eliminated"),
            @ApiResponse(responseCode = "404", description = "Client not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/cuentas/{number}"
    )
    
    default ResponseEntity<Void> deleteAccount(
        @Parameter(name = "number", description = "Account number.", required = true, in = ParameterIn.PATH) @PathVariable("number") String number
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /cuentas : Get all Accounts.
     * Get all Accounts.
     *
     * @param pgSize The amount of accounts per page. (required)
     * @param pg The page for the bulk of accounts. (required)
     * @return Query Successfully Executed (status code 200)
     */
    @Operation(
        operationId = "getAllAccounts",
        summary = "Get all Accounts.",
        description = "Get all Accounts.",
        tags = { "Account" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Query Successfully Executed", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = GetAllAccounts200ResponseInner.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/cuentas",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<GetAllAccounts200ResponseInner>> getAllAccounts(
        @NotNull @Parameter(name = "pgSize", description = "The amount of accounts per page.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "pgSize", required = true) Integer pgSize,
        @NotNull @Parameter(name = "pg", description = "The page for the bulk of accounts.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "pg", required = true) Integer pg
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"number\" : \"200012\", \"clientId\" : 2, \"isEnabled\" : true, \"type\" : \"SAVINGS\", \"availableBalance\" : \"100.23\" }, { \"number\" : \"200012\", \"clientId\" : 2, \"isEnabled\" : true, \"type\" : \"SAVINGS\", \"availableBalance\" : \"100.23\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /cuentas/{number} : Update an Account.
     * Update all fields of the Account.
     *
     * @param number Account number. (required)
     * @param accountPUT Update an existent Account. (optional)
     * @return Update Successfully Executed (status code 200)
     */
    @Operation(
        operationId = "updateAccount",
        summary = "Update an Account.",
        description = "Update all fields of the Account.",
        tags = { "Account" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Update Successfully Executed", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Account.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/cuentas/{number}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Account> updateAccount(
        @Parameter(name = "number", description = "Account number.", required = true, in = ParameterIn.PATH) @PathVariable("number") String number,
        @Parameter(name = "AccountPUT", description = "Update an existent Account.") @Valid @RequestBody(required = false) AccountPUT accountPUT
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"number\" : \"200012\", \"clientId\" : 2, \"isEnabled\" : true, \"type\" : \"SAVINGS\", \"availableBalance\" : \"100.23\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
