/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.marcelorar.software.tata.balancemanager.api;

import com.marcelorar.software.tata.balancemanager.model.Client;
import com.marcelorar.software.tata.balancemanager.model.ClientPUT;
import com.marcelorar.software.tata.balancemanager.model.GetAllClient200ResponseInner;
import com.marcelorar.software.tata.balancemanager.model.Person;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-06-28T02:33:41.156016200-05:00[America/Guayaquil]", comments = "Generator version: 7.6.0")
@Validated
@Tag(name = "Client", description = "Operations related to a Client.")
public interface ClientesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /clientes : Create a Client.
     * Create a Client.
     *
     * @param person Client information. (optional)
     * @return successful operation (status code 201)
     */
    @Operation(
        operationId = "createClient",
        summary = "Create a Client.",
        description = "Create a Client.",
        tags = { "Client" },
        responses = {
            @ApiResponse(responseCode = "201", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Client.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/clientes",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Client> createClient(
        @Parameter(name = "Person", description = "Client information.") @Valid @RequestBody(required = false) Person person
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"identificationCode\" : \"1720012573\", \"password\" : \"PassCode123\", \"address\" : \"Calle A\", \"phoneNumber\" : \"5999756112\", \"clientId\" : 2, \"gender\" : \"OTHER\", \"isEnabled\" : true, \"name\" : \"Carlos Garcia\", \"birthDate\" : \"2024-06-13\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /clientes/{clientId} : Delete a Client
     * Delete an existent Client.
     *
     * @param clientId Client to be modified. (required)
     * @return Client successfully eliminated (status code 200)
     *         or Client not found (status code 404)
     */
    @Operation(
        operationId = "deleteClient",
        summary = "Delete a Client",
        description = "Delete an existent Client.",
        tags = { "Client" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Client successfully eliminated"),
            @ApiResponse(responseCode = "404", description = "Client not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/clientes/{clientId}"
    )
    
    default ResponseEntity<Void> deleteClient(
        @Parameter(name = "clientId", description = "Client to be modified.", required = true, in = ParameterIn.PATH) @PathVariable("clientId") Integer clientId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /clientes : Get all clients.
     * Get all clients.
     *
     * @param pgSize The amount of clients per page. (required)
     * @param pg The page for the bulk of clients. (required)
     * @return Query Successfully Executed (status code 200)
     */
    @Operation(
        operationId = "getAllClient",
        summary = "Get all clients.",
        description = "Get all clients.",
        tags = { "Client" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Query Successfully Executed", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = GetAllClient200ResponseInner.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clientes",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<GetAllClient200ResponseInner>> getAllClient(
        @NotNull @Parameter(name = "pgSize", description = "The amount of clients per page.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "pgSize", required = true) Integer pgSize,
        @NotNull @Parameter(name = "pg", description = "The page for the bulk of clients.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "pg", required = true) Integer pg
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"identificationCode\" : \"1720012573\", \"password\" : \"PassCode123\", \"address\" : \"Calle A\", \"phoneNumber\" : \"5999756112\", \"clientId\" : 2, \"gender\" : \"OTHER\", \"isEnabled\" : true, \"name\" : \"Carlos Garcia\", \"birthDate\" : \"2024-06-13\" }, { \"identificationCode\" : \"1720012573\", \"password\" : \"PassCode123\", \"address\" : \"Calle A\", \"phoneNumber\" : \"5999756112\", \"clientId\" : 2, \"gender\" : \"OTHER\", \"isEnabled\" : true, \"name\" : \"Carlos Garcia\", \"birthDate\" : \"2024-06-13\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /clientes/{clientId} : Update a Client.
     * Update all fields of the Client.
     *
     * @param clientId Client to be modified. (required)
     * @param clientPUT Update an existent Client. (optional)
     * @return Update Successfully Executed (status code 200)
     */
    @Operation(
        operationId = "updateClient",
        summary = "Update a Client.",
        description = "Update all fields of the Client.",
        tags = { "Client" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Update Successfully Executed", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Client.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/clientes/{clientId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Client> updateClient(
        @Parameter(name = "clientId", description = "Client to be modified.", required = true, in = ParameterIn.PATH) @PathVariable("clientId") Integer clientId,
        @Parameter(name = "ClientPUT", description = "Update an existent Client.") @Valid @RequestBody(required = false) ClientPUT clientPUT
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"identificationCode\" : \"1720012573\", \"password\" : \"PassCode123\", \"address\" : \"Calle A\", \"phoneNumber\" : \"5999756112\", \"clientId\" : 2, \"gender\" : \"OTHER\", \"isEnabled\" : true, \"name\" : \"Carlos Garcia\", \"birthDate\" : \"2024-06-13\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
